# vim: set tabstop=4 shiftwidth=4 noexpandtab
# ================================================================
# Filename:		Makefile.common.bottom
#
# Description:	Makefile for building and running tests of pmake
#
# Author(s):	Bill McSpadden (bill@riscv.org)
#
# Revision:		See git log
#
# ================================================================


# ===========================================================================
# Convert gmsl assoc arrays into text suitable for bash assoc arrays
PMAKE_ARGS_AA_FOR_SH 	:= $(foreach var,${TESTLIST},["$(var)"]="$(call get,PMAKE_ARGS_AA,$(var))" )
ENV_VAR_NAME_AA_FOR_SH 	:= $(foreach var,${TESTLIST},["$(var)"]="$(call get,ENV_VAR_NAME_AA,$(var))" )
ENV_VAR_VAL_AA_FOR_SH 	:= $(foreach var,${TESTLIST},["$(var)"]="$(call get,ENV_VAR_VAL_AA,$(var))" )
LOGFILE_AA_FOR_SH		:= $(foreach var,${TESTLIST},["$(var)"]="$(call get,LOGFILE_AA,$(var))" )

# ===========================================================================
# Print out usefule Makefile variables

$(info ============================================)
$(info Makefile Variables:)
$(info     SHELL:                  ${SHELL})
$(info     TEST_DIR_PATH           ${TEST_DIR_PATH})
$(info     PMAKE_PATH              ${PMAKE_PATH})
$(info     LOGFILE                 ${LOGFILE})
$(info     TESTLIST                ${TESTLIST})
$(info ============================================)




#===========================================================================
# Rules

default:
	@echo "supported Makefile targets:";
	@echo "   default -       this target"
	@echo "   build -         compile/build the object";
	@echo "   run -           run the built object";
	@echo "   check -         check if the run passed or failed";
	@echo "   clean -         remove local artifacts";

TESTDIRS = $(wildcard *.testdir)

.PHONY: build
build:
	@echo "making \"$@\" in $$PWD" ;
	@exit_code=0 ;                                                      							\
	for testdir in ${TESTDIRS}; 																	\
		do																							\
		if [ ! -d $$testdir ] ;																		\
			then																					\
			echo "(GNU Make) error: no $$testdir." ;												\
			exit_code=1;          																	\
			continue;																				\
			fi ;																					\
		if [ ! -f $$testdir/Makefile ] ;															\
			then																					\
			echo "(GNU make): error: no Makefile in $$testdir." ;									\
			exit_code=1;          																	\
			continue;																				\
			fi ;																					\
		make -C $$testdir $@ ;																		\
		if [ $$? -ne 0 ] ;                                              							\
			then                                                            						\
			echo "(GNU make): error: 'make -C $$testdir $@' exited with nonzero exit status" ;		\
			exit_code=1;          																	\
			fi ;																					\
		done;																						\
		exit $$exit_code ;

.PHONY: run
run:
	@echo "making \"$@\" in $$PWD" ;
	@for testdir in ${TESTDIRS}; 										\
		do																\
		if [ ! -f $$testdir/Makefile ] ;								\
			then														\
			echo "ERROR: no Makefile in $$testdir." >> test.failed;		\
			fi ;														\
		make -C $$testdir $@ ;											\
		if [ $$? -ne 0 ] ;                                              			\
			then                                                            		\
			echo "'make -C $$testdir $@' exited with nonzero exit status" >> test.failed ;	\
			fi ;																			\
		done;
	if [ ! -z "${TESTLIST}" ] ;															\
		then																		\
		make run_tests ;															\
		if [ $$? -ne 0 ] ;                                              			\
			then                                                            		\
			echo "'make run_tests' exited with nonzero exit status" >> test.failed ;	\
			fi ;																			\
		fi;



# TODO: redirect stderr to logfile
.PHONY: run_tests
run_tests:
	@echo "making \"$@\" in $$PWD" ;
	@declare -A pmake_args_aa=( ${PMAKE_ARGS_AA_FOR_SH} ) ; 			\
	declare -A env_var_name_aa=( ${ENV_VAR_NAME_AA_FOR_SH} ) ; 			\
	declare -A env_var_val_aa=( ${ENV_VAR_VAL_AA_FOR_SH} ) ; 			\
	declare -A logfile_aa=( ${LOGFILE_AA_FOR_SH} ) ; 					\
	for testname in ${TESTLIST} ; 										\
		do 																\
		mkdir -p $$testname.artifactdir || ( echo "unable to create $$testname.artifactdir" >> ./${LOGFILE} ; exit $$? ; ) ; 	\
		# Set env vars so that the pmake makefile can see what the values														\
		#	from the command line are supposed to be.																			\
		export ENV_PMAKE_CMD_LINE_VAR_NAME=$${env_var_name_aa[$$testname]} ;													\
		export ENV_PMAKE_CMD_LINE_VAR_VAL=$${env_var_val_aa[$$testname]} ;														\
		${PMAKE_PATH} $${pmake_args_aa[$$testname]} >> $${logfile_aa[$$testname]} ; 											\
		if [ $$? -ne 0 ] ; 																										\
			then 																												\
			# stdout must go into logfile,  not test.failed. test.failed and test.passed are only								\
			# created in the check target.																						\
			echo "error (GNU make): 'pmake' exited with a non-zero exit status" >> $${logfile_aa[$$testname]} ; 				\
		else																													\
			echo "(GNU make) 'pmake' exited with a zero exit status. yay" >> $${logfile_aa[$$testname]} ; 						\
			fi ;																												\
		done ;


# TODO: Need to handle "expected errors".  That is,  there is a class of
#		tests were we want to check that an error was detected and reported.
#		"reported" can mean: 1) that the exit code was non-zero  2) that
#		the word "error" should appear in the log file.
.PHONY: check
check :
	@echo "$$PWD: making \"$@\"" ;
	@rm -f test.passed test.failed ;
	@for testdir in ${TESTDIRS}; 															\
		do																					\
		if [ ! -f $$testdir/Makefile ] ;													\
			then																			\
			echo "ERROR: no Makefile in $$testdir." >> test.failed;							\
			fi ;																			\
		make -C $$testdir $@ ;																\
		if [ $$? -ne 0 ] ;                                              					\
			then                                                            				\
			echo "'make -C $$testdir $@' exited with nonzero exit status" >> test.failed ;	\
			fi ;																			\
		if [ -f $$testdir/test.failed ] ;													\
			then																			\
			echo "ERROR: test.failed exists in $$testdir." >> test.failed;					\
			cat $$testdir/test.failed >> test.failed ;										\
			fi ;																			\
		if [ ! -f ./test.failed ] ;															\
			then																			\
			if [ -f $$testdir/test.passed ] ;												\
				then																		\
				echo "test.passed exists in $$testdir" >> test.passed ;						\
				cat $$testdir/test.passed >> test.passed ;									\
				fi ;																		\
			fi;																				\
		done;
	@for testname in ${TESTLIST} ; 																							\
		do 																													\
		# Go through each of testname artifact dirs looking for errors 														\
		#	in the logfile 																									\
		artifactdir=$${testname}.artifactdir ; 																				\
		if [ ! -d $${artifactdir} ]; 																						\
			then 																											\
			echo "error: $${artifactdir} not found" >> test.failed; 														\
		else  																												\
			rm -f test.passed test.failed ; 																				\
			pushd $${artifactdir} ; 																						\
			bn=`basename $$PWD` ;																							\
			if ! [ -f ${LOGFILE} ] ;																						\
				then																										\
				echo "FAILED: (GNU make): $${bn} test failed.  no logfile after 'make run': ${LOGFILE}" >> test.failed ; 	\
				exit 1  ;																									\
				fi ;																										\
			grep --ignore-case --quiet error ${LOGFILE} ;																	\
			if [ $$? -eq 0 ] ;																								\
				then																										\
				echo "error (GNU make): $${bn} test failed.  keyword 'error' found in logfile: ${LOGFILE}" >> test.failed ;	\
				fi ;																										\
			if [ ! -f test.failed ] ;																						\
				then																										\
				echo "PASSED: (GNU_MAKE): $${bn}" >> test.passed ;															\
				fi; 																										\
			popd ; 																											\
			fi ; 																											\
		done ;
	@for testname in ${TESTLIST} ; 																							\
		do 																													\
		# Look for test.failed files (test.passed files) in each of the 													\
		# artifact dirs and sum up the failures and put them in test.failed/test.passed 									\
		artifactdir=$${testname}.artifactdir ; 																				\
		if [ -f $$artifactdir/test.failed ] ;																				\
			then																											\
			echo "$$artifactdir/test.failed exists." >> test.failed;														\
			cat $$artifactdir/test.failed >> test.failed ;																	\
			fi;																												\
		if [ -f $$artifactdir/test.passed ] ;																				\
			then																											\
			if [ -f $$artifactdir/test.failed ] ;																			\
				then																										\
				echo "both $$artifactdir/test.failed exists AND $$artifactdir/test.passed exists." >> test.failed;			\
				cat $$artifactdir/test.failed >> test.failed ;																\
			else 																											\
				echo "$$PWD/$$artifactdir/test.passed exists." >> test.passed;												\
				fi; 																										\
			fi;																												\
		if [ ! -f $$artifactdir/test.failed ] ;																				\
			then																											\
			if [ ! -f $$artifactdir/test.passed ] ;																			\
				then																										\
				echo "neither $$PWD/$$artifactdir/test.failed nor test.passed exists." >> test.failed ; 					\
				fi ;																										\
			fi;																												\
		done ;

.PHONY: clean
clean:
	@echo "making \"$@\" in $$PWD" ;
	@exit_code=0 ;                                                      							\
	for testdir in ${TESTDIRS}; 																	\
		do																							\
		if [ ! -d $$testdir ] ;																		\
			then																					\
			echo "(GNU Make) error: no $$testdir." ;												\
			exit_code=1;          																	\
			continue;																				\
			fi ;																					\
		if [ ! -f $$testdir/Makefile ] ;															\
			then																					\
			echo "(GNU make): error: no Makefile in $$testdir." ;									\
			exit_code=1;          																	\
			continue;																				\
			fi ;																					\
		make -C $$testdir $@ ;																		\
		if [ $$? -ne 0 ] ;                                              							\
			then                                                            						\
			echo "(GNU make): error: 'make -C $$testdir $@' exited with nonzero exit status" ;		\
			exit_code=1;          																	\
			fi ;																					\
		done;																						\
	# clean up local files/dirs																		\
	rm -f test.passed test.failed ${LOGFILE} ; 														\
	if [ $$? -ne 0 ] ;                                              								\
		then                                                            							\
		exit_code=1 ;																				\
		echo "(GNU_MAKE) 'rm <files>' command in $@ failed. Check your dirs." ;						\
		fi ;																						\
	rm -rf *.artifactdir ;																			\
	if [ $$? -ne 0 ] ;                                              								\
		then                                                            							\
		exit_code=1 ;																				\
		echo "(GNU_MAKE) 'rm artifactdir' command in $@ failed. Check your dirs." ;					\
		fi ;																						\
	exit $$exit_code ;



